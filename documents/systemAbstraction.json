{
  "key": "systemAbstraction",
  "value": {
    "designRules": "1. カラーパレット:\n   - プライマリカラー: #3498db (青)\n   - セカンダリカラー: #2ecc71 (緑)\n   - アクセントカラー: #e74c3c (赤)\n   - 背景色: #f5f5f5 (薄いグレー)\n   - テキスト色: #333333 (濃いグレー)\n\n2. タイポグラフィ:\n   - 見出し: Roboto Bold 24px\n   - 本文: Open Sans Regular 16px\n\n3. レイアウト:\n   - レスポンシブデザインを採用\n   - グリッドシステムを使用してコンテンツを整列\n\n4. コンポーネント:\n   - フラットデザインのボタンを使用\n   - カード形式でイベント情報を表示\n\n5. アイコン:\n   - Material Iconsを使用\n\n6. アニメーション:\n   - 控えめなトランジションエフェクトを使用\n\n7. フォーム:\n   - 入力フィールドは十分な余白を持たせる\n   - エラー状態を視覚的に明確に表示\n\n8. アクセシビリティ:\n   - 適切なコントラスト比を維持\n   - スクリーンリーダー対応のマークアップを使用",
    "codingRules": "1. 命名規則:\n   - 変数名はキャメルケース (例: eventName)\n   - 定数は大文字のスネークケース (例: MAX_PARTICIPANTS)\n   - コンポーネント名はパスカルケース (例: EventCard)\n\n2. インデント:\n   - 2スペースを使用\n\n3. コードの可読性:\n   - 関数は単一責任の原則に従う\n   - コメントは必要に応じて追加し 複雑なロジックを説明\n   - 長い関数は小さな関数に分割\n\n4. エラーハンドリング:\n   - try-catch文を使用してエラーを適切に処理\n   - ユーザーフレンドリーなエラーメッセージを表示\n   - エラーログを適切に記録\n\n5. 非同期処理:\n   - async/awaitを使用し Promiseの連鎖を避ける\n\n6. コード構成:\n   - コンポーネントごとにファイルを分割\n   - 共通の関数やユーティリティはsrc/utilsディレクトリに配置",
    "systemAbstraction": "イベント管理システムは以下の主要機能を提供します:\n\n1. イベント作成: ユーザーがイベント名 開催日時 場所などの詳細を入力してイベントを作成できる\n\n2. 出欠管理: 参加者がイベントへの参加・不参加を簡単に登録できる\n\n3. 参加者リスト管理: イベントごとの参加者一覧を確認・管理できる\n\n4. リアルタイム更新: イベントの参加状況をリアルタイムで確認できる\n\n5. カレンダー表示: イベントをカレンダー形式で表示し 全体のスケジュールを把握しやすくする\n\nシステムはNext.jsを使用して実装され データベースにイベント情報や参加者データを保存します。ユーザーフレンドリーなインターフェースにより 効率的なイベント管理と参加者とのスムーズなコミュニケーションを実現します。"
  }
}
